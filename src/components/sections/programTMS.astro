---
import { Image } from 'astro:assets';
---

<section class="overflow-hidden justify-center px-16 py-11 bg-white max-w-[1400px] mx-auto max-md:px-5 max-lg:px-10 max-xl:px-12">
  <div class="flex gap-5 max-md:flex-col max-[820px]:flex-col max-[800px]:flex-col">
    <article class="w-[46%] max-md:ml-0 max-md:w-full max-[820px]:w-full max-[800px]:w-full">
      <div class="w-full max-md:mt-10 max-[820px]:mt-6 max-[800px]:mt-6 max-md:max-w-full">
        <h1 class="text-5xl font-medium leading-[72px] text-neutral-800 max-md:max-w-full max-md:text-4xl max-md:leading-[64px] max-[820px]:text-3xl max-[820px]:leading-[54px] max-[800px]:text-3xl max-[800px]:leading-[54px]">
          {Astro.props.Content.mainHeading}
          <span class="text-[#5E81E9]">{Astro.props.Content.coloredHeading}</span>
        </h1>

        <p class="mt-8 text-lg leading-9 text-neutral-800 max-md:max-w-full">
          {Astro.props.Content.description}
        </p>

        <div class="flex flex-wrap gap-3 mt-8 max-w-full w-[552px]">
          <a  href=`${Astro.props.Content.buttonLink}` class="flex flex-col flex-1 shrink justify-center items-center px-5 py-4 text-lg font-semibold leading-none bg-amber-300 basis-0 min-w-60 rounded-[50px] text-neutral-800">
            {Astro.props.Content.buttonText}
          </a>

          <a href=`tel:${Astro.props.Content.buttonTwo_Number}` class="flex flex-col flex-1 shrink justify-center items-center px-5 py-4 my-auto text-white bg-purple-900 basis-0 min-w-60 rounded-[50px]">
            <span class="text-xs">{Astro.props.Content.buttonTwo_Part_1}</span>
            <span class="text-xs font-semibold leading-6">Call {Astro.props.Content.buttonTwo_Part_2}</span>
          </a>
        </div>
      </div>
    </article>

    <figure class="ml-5 w-[54%] max-md:ml-0 max-md:w-full max-[820px]:ml-0 max-[820px]:w-full max-[800px]:ml-0 max-[800px]:w-full">
      <Image
        src={Astro.props.Content.image}
        alt={Astro.props.Content.imageAlt}
        class="object-contain grow w-full rounded-3xl aspect-[1.35] max-md:mt-10 max-md:max-w-full"
        width={800}
        height={593}
        loading="lazy"
        format="webp"
      />
    </figure>
  </div>
</section>

<div class="flex justify-center items-center px-16 py-9 mx-auto w-full max-w-[1400px] bg-white max-md:px-10 max-md:py-6 max-lg:px-12 max-xl:px-14 max-[820px]:px-8 max-[800px]:px-8 max-sm:px-5 max-sm:py-4 max-sm:max-w-screen-sm">
  <section class="flex flex-col shrink-0 gap-6 items-start w-full max-w-[1320px] mx-auto max-md:w-full max-[820px]:w-full max-[800px]:w-full">
    {Astro.props.Content.conditions.map((row) => (
      <div class="flex gap-6 items-center self-stretch max-md:flex-col max-[820px]:flex-col max-[800px]:flex-col max-md:gap-4 max-sm:gap-3">
        {row.map((condition) => (
          <article class="dropdown-article relative flex flex-col gap-4 items-start flex-[1_0_0] max-md:w-full max-[820px]:w-full max-[800px]:w-full max-sm:gap-3">
            <div class="flex justify-between items-center self-stretch max-sm:gap-2 dropdown-header cursor-pointer">
              <div class="flex gap-3 items-center max-md:w-full max-sm:gap-2">
                <div class="shrink-0 w-10 h-10 max-sm:w-8 max-sm:h-8">
                  <Image 
                    src={condition.icon} 
                    alt={`${condition.title} Icon`} 
                    class="icon" 
                    style="width: 40px; height: 40px; flex-shrink: 0"
                    width={40}
                    height={40}
                    loading="lazy"
                    format="webp"
                  />
                </div>
                <h2 class="text-2xl leading-10 text-neutral-800 max-md:text-xl max-md:leading-8 max-sm:text-lg max-sm:leading-7">
                  {condition.title}
                </h2>
              </div>
              <div class="dropdown-toggle" aria-label={`Expand ${condition.title} section`}>
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="arrow-icon" style="width: 24px; height: 24px">
                  <path d="M2.47863 7.88312L3.89788 6.46387L12.1324 14.6984L20.3669 6.46387L21.7861 7.88312L12.1324 17.5369L2.47863 7.88312Z" fill="#222222"></path>
                </svg>
              </div>
            </div>
            <hr class="self-stretch h-px border-b border-solid border-b-neutral-800">
            <div class="dropdown-content absolute top-full left-0 right-0 bg-white z-10 opacity-0 invisible transform translate-y-[-10px] border border-gray-200 rounded-lg shadow-lg">
              <p class="text-base leading-7 text-neutral-700 p-4">
                {condition.description} 
              </p>
            </div>
          </article>
        ))}
      </div>
    ))}
  </section>
</div>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const dropdownHeaders = document.querySelectorAll('.dropdown-header');

    dropdownHeaders.forEach(header => {
      header.addEventListener('click', () => {
        const article = header.closest('.dropdown-article');
        if (article) {
          const content = article.querySelector('.dropdown-content');
          const arrowIcon = article.querySelector('.arrow-icon');
          const isCurrentlyOpen = article.classList.contains('open');

          // Close all other dropdowns
          dropdownHeaders.forEach(otherHeader => {
            const otherArticle = otherHeader.closest('.dropdown-article');
            if (otherArticle && otherArticle !== article) {
              const otherContent = otherArticle.querySelector('.dropdown-content');
              const otherArrowIcon = otherArticle.querySelector('.arrow-icon');
              
              otherArticle.classList.remove('open');
              if (otherContent) {
                otherContent.classList.remove('visible');
              }
              if (otherArrowIcon) {
                otherArrowIcon.style.transform = 'rotate(0deg)';
              }
            }
          });

          // Toggle current dropdown
          if (content) {
            if (isCurrentlyOpen) {
              article.classList.remove('open');
              content.classList.remove('visible');
            } else {
              article.classList.add('open');
              content.classList.add('visible');
            }

            // Rotate the arrow icon
            if (arrowIcon) {
              arrowIcon.style.transform = article.classList.contains('open') ? 'rotate(180deg)' : 'rotate(0deg)';
              arrowIcon.style.transition = 'transform 0.3s ease-in-out';
            }
          }
        }
      });
    });
  });
</script>

<style>
  /* Basic styles for the dropdown content */
  .dropdown-content {
    transition: opacity 0.3s ease-in-out, visibility 0.3s ease-in-out, transform 0.3s ease-in-out;
  }

  .dropdown-content.visible {
    opacity: 1;
    visibility: visible;
    transform: translate(0);
  }

  /* Optional: Rotate arrow when open */
  .dropdown-article.open .arrow-icon {
    transform: rotate(180deg);
  }

  /* Ensure proper stacking context */
  .dropdown-article {
    position: relative;
  }
  
  /* Make the header look clickable */
  .dropdown-header {
    transition: background-color 0.2s ease;
  }
  
  .dropdown-header:hover {
    background-color: rgba(0, 0, 0, 0.03);
  }
</style>