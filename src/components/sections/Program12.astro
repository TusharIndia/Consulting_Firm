---
interface Props {
  Content: {
    badgeText: string;
    heading: string;
    description: string;
    mainImage: string;
    mainImageAlt: string;
    steps: {
      stepNumber: string;
      title: string;
      description: string; // Added description field
    }[];
  };
}

const { Content } = Astro.props;
---

<section class="relative mx-auto my-0 max-w-none rounded-3xl h-[1468px] w-[1320px] max-md:px-5 max-md:py-10 max-md:w-full max-md:max-w-screen-md max-md:h-auto max-sm:px-4 max-sm:py-5 max-sm:max-w-screen-sm max-[820px]:px-6 max-[820px]:py-12 max-[820px]:h-auto max-[820px]:w-full bg-[#f8f5f1]">
  <!-- Decorative Wave SVG -->
  <div class="absolute left-[-29px] top-[92px] w-[1384px] h-[216px] max-[820px]:w-full max-[820px]:left-0 max-[820px]:scale-90 max-[820px]:overflow-hidden">
    <svg
      width="1320"
      height="261"
      viewBox="0 0 1320 261"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      class="decorative-wave"
    >
      <path
        d="M-29 159.359C4 128.359 105.5 73.3593 167 103.359C225.389 131.842 318.785 141.851 362.533 96.4732C391.024 66.9222 361.543 17.1347 320.893 22.8408C283.379 28.1068 249.542 59.3098 253.5 149.859C259.9 296.259 1031.5 218.026 1354.5 211.359"
        stroke="white"
        stroke-opacity="0.46"
        stroke-width="44"
      ></path>
    </svg>
  </div>

  <!-- Header Section -->
  <header>
    <span class="absolute hidden md:flex top-20 left-20 px-10 pt-1.5 pb-2 text-base leading-6 text-white bg-purple-900 rounded-[50px] max-md:static max-md:mb-5 max-md:w-fit max-[820px]:static max-[820px]:mb-5 max-[820px]:w-fit">
      {Content.badgeText}
    </span>

    <div class="absolute left-20 h-[216px] top-[172px] w-[1160px] max-md:static max-md:mb-10 max-md:w-full max-md:h-auto max-[820px]:static max-[820px]:mb-10 max-[820px]:w-full max-[820px]:h-auto">
      <h1 class="absolute top-0 left-0 text-5xl font-medium h-[216px] leading-[72px] text-neutral-800 w-[706px] max-md:static max-md:mb-5 max-md:w-full max-md:h-auto max-md:text-4xl max-md:leading-10 max-sm:text-3xl max-sm:leading-9 max-[820px]:static max-[820px]:mb-5 max-[820px]:w-full max-[820px]:h-auto max-[820px]:text-4xl max-[820px]:leading-[50px]">
        {Content.heading}
      </h1>

      <p class="absolute text-lg leading-9 opacity-75 h-[170px] left-[756px] text-neutral-800 top-[23px] w-[404px] max-md:static max-md:w-full max-md:h-auto max-sm:text-base max-sm:leading-7 max-[820px]:static max-[820px]:w-full max-[820px]:h-auto max-[820px]:mt-4">
        {Content.description}
      </p>
    </div>
  </header>

  <!-- Main Image Section -->
  <figure class="absolute left-20 h-[596px] top-[444px] w-[1160px] max-md:static max-md:mb-10 max-md:w-full max-md:h-[400px] max-sm:h-[300px] max-[820px]:static max-[820px]:mb-10 max-[820px]:w-full max-[820px]:h-[450px]">
    <div class="relative h-[596px] w-[1160px] max-md:w-full max-md:h-[400px] max-sm:h-[300px] max-[820px]:w-full max-[820px]:h-[450px]">
      <div class="absolute top-4 left-4 rounded-3xl bg-opacity-0 h-[330px] w-[641px] max-md:h-[calc(100%_-_32px)] max-md:w-[calc(100%_-_32px)] max-[820px]:h-[calc(100%_-_32px)] max-[820px]:w-[calc(100%_-_32px)]"></div>
      <img
        src={Content.mainImage}
        alt={Content.mainImageAlt}
        class="absolute left-7 rounded-3xl h-[543px] top-[26px] w-[1105px] object-cover border-[20px] border-white max-md:left-7 max-md:h-[calc(100%_-_56px)] max-md:top-[26px] max-md:w-[calc(100%_-_56px)] max-[820px]:left-7 max-[820px]:h-[calc(100%_-_56px)] max-[820px]:top-[26px] max-[820px]:w-[calc(100%_-_56px)]"
      />
    </div>
  </figure>

  <!-- Steps Section -->
  <section class="flex absolute left-20 flex-col gap-8 items-start top-[1088px] w-[1160px] max-md:static max-md:w-full max-md:h-auto max-[820px]:static max-[820px]:w-full max-[820px]:mt-8">
    {Content.steps.map((step, index) => {
      const isOddIndex = index % 2 === 0;
      const isLastRow = index >= Content.steps.length - 2;
      const shouldShowEmptyColumn = isLastRow && Content.steps.length % 2 !== 0 && index === Content.steps.length - 1;
      
      return (
        <>
          {isOddIndex && (
            <div class="flex gap-6 items-start w-full max-md:flex-col max-md:gap-6 max-[820px]:flex-col max-[820px]:gap-5">
              <!-- Current Step -->
              <article class="flex flex-col gap-3 items-start flex-1 w-[560px] max-md:w-full max-[820px]:w-full step-article overflow-hidden" data-step-id={index}>
                <div class="flex justify-between items-center w-full pb-2">
                  <div class="flex gap-4 items-center max-md:w-full max-sm:flex-col max-sm:gap-2 max-sm:items-start max-[820px]:w-full">
                    <div class="flex justify-center items-center flex-shrink-0 w-10 h-10">
                      <svg width="40" height="40" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <circle cx="20" cy="20" r="20" fill="#222222"/>
                        <text fill="white" font-family="Inter" font-size="16" font-weight="bold" x="50%" y="50%" text-anchor="middle" dy="0.35em">{step.stepNumber}</text>
                      </svg>
                    </div>
                    <h2 class="text-2xl font-medium leading-8 text-neutral-800 max-md:text-xl max-md:leading-8 max-sm:text-lg max-sm:leading-7 max-[820px]:text-xl max-[820px]:leading-8">
                      {step.title}
                    </h2>
                  </div>
                  <button aria-label={`Expand details about ${step.title.toLowerCase()}`} class="w-6 h-6 toggle-button" data-step-id={index}>
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="arrow-icon">
                      <path d="M2.47888 7.88263L3.89813 6.46338L12.1326 14.6979L20.3671 6.46338L21.7864 7.88263L12.1326 17.5364L2.47888 7.88263Z" fill="#222222"></path>
                    </svg>
                  </button>
                </div>
                <div class="w-full h-px bg-neutral-800 opacity-50"></div>
                <div class="step-description hidden w-full pt-2 pb-4 text-base leading-7 opacity-80 transition-all duration-300">
                  <p class="description-text">{step.description}</p>
                </div>
              </article>

              <!-- Next Step (if exists) -->
              {Content.steps[index + 1] && (
                <article class="flex flex-col gap-3 items-start flex-1 w-[560px] max-md:w-full max-[820px]:w-full step-article overflow-hidden" data-step-id={index + 1}>
                  <div class="flex justify-between items-center w-full pb-2">
                    <div class="flex gap-4 items-center max-md:w-full max-sm:flex-col max-sm:gap-2 max-sm:items-start max-[820px]:w-full">
                      <div class="flex justify-center items-center flex-shrink-0 w-10 h-10">
                        <svg width="40" height="40" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <circle cx="20" cy="20" r="20" fill="#222222"/>
                          <text fill="white" font-family="Inter" font-size="16" font-weight="bold" x="50%" y="50%" text-anchor="middle" dy="0.35em">{Content.steps[index + 1].stepNumber}</text>
                        </svg>
                      </div>
                      <h2 class="text-2xl font-medium leading-8 text-neutral-800 max-md:text-xl max-md:leading-8 max-sm:text-lg max-sm:leading-7 max-[820px]:text-xl max-[820px]:leading-8">
                        {Content.steps[index + 1].title}
                      </h2>
                    </div>
                    <button aria-label={`Expand details about ${Content.steps[index + 1].title.toLowerCase()}`} class="w-6 h-6 toggle-button" data-step-id={index + 1}>
                      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="arrow-icon">
                        <path d="M2.47888 7.88263L3.89813 6.46338L12.1326 14.6979L20.3671 6.46338L21.7864 7.88263L12.1326 17.5364L2.47888 7.88263Z" fill="#222222"></path>
                      </svg>
                    </button>
                  </div>
                  <div class="w-full h-px bg-neutral-800 opacity-50"></div>
                  <div class="step-description hidden w-full pt-2 pb-4 text-base leading-7 opacity-80 transition-all duration-300">
                    <p class="description-text">{Content.steps[index + 1].description}</p>
                  </div>
                </article>
              )}

              <!-- Empty column for last odd step -->
              {shouldShowEmptyColumn && (
                <div class="flex-1 w-[560px] max-md:hidden max-[820px]:hidden"></div>
              )}
            </div>
          )}
        </>
      );
    })}
  </section>
</section>

<style>
@media (min-width: 768px) and (max-width: 820px) {
  section {
    margin-left: 20px;
    margin-right: 20px;
    width: calc(100% - 40px);
  }
  
  .absolute.left-20 {
    left: 40px;
  }
  
  .absolute.left-20.h-\[216px\] {
    width: calc(100% - 80px);
  }
  
  .absolute.left-20.h-\[596px\] {
    width: calc(100% - 80px);
  }
  
  .absolute.left-20.flex {
    width: calc(100% - 80px);
  }
}

@media (max-width: 767px) {
  section {
    margin-left: 16px;
    margin-right: 16px;
    width: calc(100% - 32px);
  }
}

.arrow-icon.rotate {
  transform: rotate(180deg);
  transition: transform 0.3s ease;
}

.arrow-icon {
  transition: transform 0.3s ease;
}

.step-article {
  position: relative;
  transition: all 0.3s ease;
}

.step-description {
  max-height: 0;
  overflow: hidden;
  opacity: 0;
  transition: max-height 0.3s ease, opacity 0.3s ease;
  word-wrap: break-word;
}

.step-description.active {
  max-height: 250px;
  opacity: 1;
  overflow-y: auto;
}

.description-text {
  padding-right: 10px;
}

@media (max-width: 820px) {
  .step-description.active {
    max-height: 300px;
  }
}
</style>

<script defer>
  // Initialize step toggle functionality
  document.addEventListener('DOMContentLoaded', () => {
    let activeStepId = null;
    const toggleButtons = document.querySelectorAll('.toggle-button');
    
    function adjustSectionHeight() {
      const mainSection = document.querySelector('section.relative.mx-auto');
      if (mainSection) {
        // Give a small delay to allow transitions to complete
        setTimeout(() => {
          const stepsSection = document.querySelector('section.flex.absolute');
          if (stepsSection) {
            const stepsBottom = stepsSection.getBoundingClientRect().bottom;
            const mainSectionTop = mainSection.getBoundingClientRect().top;
            const newHeight = stepsBottom - mainSectionTop + 100; // Add padding
            
            if (window.innerWidth >= 768) {
              mainSection.style.height = `${newHeight}px`;
            } else {
              mainSection.style.height = 'auto';
            }
          }
        }, 310);
      }
    }
    
    toggleButtons.forEach(button => {
      button.addEventListener('click', () => {
        const stepId = button.getAttribute('data-step-id');
        const stepArticle = document.querySelector(`.step-article[data-step-id="${stepId}"]`);
        const stepDescription = stepArticle.querySelector('.step-description');
        const arrowIcon = button.querySelector('.arrow-icon');
        
        // Close the currently open step if it's not the one being clicked
        if (activeStepId !== null && activeStepId !== stepId) {
          const activeArticle = document.querySelector(`.step-article[data-step-id="${activeStepId}"]`);
          const activeDescription = activeArticle.querySelector('.step-description');
          const activeArrow = activeArticle.querySelector('.arrow-icon');
          
          activeDescription.classList.remove('active');
          activeDescription.classList.add('hidden');
          activeArrow.classList.remove('rotate');
        }
        
        // Toggle the clicked step
        if (activeStepId === stepId) {
          // If clicking the active step, close it
          stepDescription.classList.remove('active');
          stepDescription.classList.add('hidden');
          arrowIcon.classList.remove('rotate');
          activeStepId = null;
        } else {
          // Otherwise, open the clicked step
          stepDescription.classList.add('active');
          stepDescription.classList.remove('hidden');
          arrowIcon.classList.add('rotate');
          activeStepId = stepId;
        }
        
        // Adjust the section height to accommodate the open step
        adjustSectionHeight();
      });
    });
    
    // Adjust on window resize too
    window.addEventListener('resize', adjustSectionHeight);
  });
</script>
